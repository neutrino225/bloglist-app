{"ast":null,"code":"var _jsxFileName = \"/home/neutrino/fsopen/part7/bloglist-frontend/src/components/Togglable.js\",\n    _s = $RefreshSig$();\n\n/** @format */\nimport PropTypes from 'prop-types';\nimport { useState, forwardRef, useImperativeHandle } from 'react';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Togglable = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((props, refs) => {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  const hideWhenVisible = {\n    display: visible ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visible ? '' : 'none'\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(refs, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: hideWhenVisible,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        sx: {\n          marginTop: 4\n        },\n        onClick: toggleVisibility,\n        children: props.buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: showWhenVisible,\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}, \"7Y5lBLdF9mkfoiy3F9Lk5HPUzvA=\")), \"7Y5lBLdF9mkfoiy3F9Lk5HPUzvA=\");\n\n_c2 = Togglable;\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\nTogglable.displayName = 'Toggleable';\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["/home/neutrino/fsopen/part7/bloglist-frontend/src/components/Togglable.js"],"names":["PropTypes","useState","forwardRef","useImperativeHandle","Button","Togglable","props","refs","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","marginTop","buttonLabel","children","propTypes","string","isRequired","displayName"],"mappings":";;;AAAA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,mBAA/B,QAA0D,OAA1D;AACA,SAASC,MAAT,QAAuB,eAAvB;;;AAEA,MAAMC,SAAS,iCAAGH,UAAU,SAAC,CAACI,KAAD,EAAQC,IAAR,KAAiB;AAAA;;AAC5C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAL,EAAAA,mBAAmB,CAACI,IAAD,EAAO,MAAM;AAC9B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAEH,eAAZ;AAAA,6BAEE,QAAC,MAAD;AAAQ,QAAA,EAAE,EAAE;AAAEI,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAA8B,QAAA,OAAO,EAAED,gBAAvC;AAAA,kBACGP,KAAK,CAACS;AADT;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,KAAK,EAAEH,eAAZ;AAAA,gBACGN,KAAK,CAACU;AADT;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA9B2B,kCAAb,iCAAf;;MAAMX,S;AAgCNA,SAAS,CAACY,SAAV,GAAsB;AACpBF,EAAAA,WAAW,EAAEf,SAAS,CAACkB,MAAV,CAAiBC;AADV,CAAtB;AAIAd,SAAS,CAACe,WAAV,GAAwB,YAAxB;AACA,eAAef,SAAf","sourcesContent":["/** @format */\nimport PropTypes from 'prop-types'\nimport { useState, forwardRef, useImperativeHandle } from 'react'\nimport { Button } from '@mui/material'\n\nconst Togglable = forwardRef((props, refs) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(refs, () => {\n    return {\n      toggleVisibility,\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        {/* <button onClick={toggleVisibility}>{props.buttonLabel}</button> */}\n        <Button sx={{ marginTop: 4 }} onClick={toggleVisibility}>\n          {props.buttonLabel}\n        </Button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        {/* <button onClick={toggleVisibility}>cancel</button> */}\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired,\n}\n\nTogglable.displayName = 'Toggleable'\nexport default Togglable\n"]},"metadata":{},"sourceType":"module"}