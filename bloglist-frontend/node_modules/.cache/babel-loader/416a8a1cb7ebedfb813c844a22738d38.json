{"ast":null,"code":"/** @format */\nimport { createSlice } from '@reduxjs/toolkit';\nimport blogService from '../services/blogs';\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    setBlogs(state, action) {\n      return action.payload;\n    },\n\n    appendBlog(state, action) {\n      state.push(action.payload);\n    },\n\n    changeBlog(state, action) {\n      const blogToChange = action.payload;\n      const id = blogToChange.id;\n      const updatedState = state.map(b => b.id !== id ? b : blogToChange);\n      const sortedBlogList = updatedState.sort((a, b) => b.likes - a.likes);\n      return sortedBlogList;\n    },\n\n    removeBlog(state, action) {\n      return state.filter(blog => blog.id !== action.payload);\n    }\n\n  }\n});\nexport const {\n  setBlogs,\n  appendBlog,\n  changeBlog,\n  removeBlog\n} = blogSlice.actions;\nexport const initializeBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch(setBlogs(blogs));\n  };\n};\nexport const createBlog = (blog, userToken) => {\n  return async dispatch => {\n    const newBlog = await blogService.addBlog(blog, userToken);\n    dispatch(appendBlog(newBlog));\n  };\n};\nexport const deleteBlog = (id, userToken) => {\n  return async dispatch => {\n    await blogService.deleteBlog(id, userToken);\n    dispatch(removeBlog(id));\n  };\n};\nexport const updateBlog = (blog, token, blogId) => {\n  return async dispatch => {\n    const updatedBlog = await blogService.updateBlog(blog, token, blogId);\n    dispatch(changeBlog(updatedBlog));\n  };\n};\nexport const addComment = (blogid, comment, token) => {\n  return async dispatch => {\n    const updatedBlog = await blogService.addComment(blogid, comment, token);\n    dispatch(changeBlog(updatedBlog));\n  };\n};\nexport default blogSlice.reducer;","map":{"version":3,"sources":["/home/neutrino/fsopen/part7/bloglist-frontend/src/reducers/blogreducer.js"],"names":["createSlice","blogService","blogSlice","name","initialState","reducers","setBlogs","state","action","payload","appendBlog","push","changeBlog","blogToChange","id","updatedState","map","b","sortedBlogList","sort","a","likes","removeBlog","filter","blog","actions","initializeBlogs","dispatch","blogs","getAll","createBlog","userToken","newBlog","addBlog","deleteBlog","updateBlog","token","blogId","updatedBlog","addComment","blogid","comment","reducer"],"mappings":"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","sourcesContent":["/** @format */\n\nimport { createSlice } from '@reduxjs/toolkit'\nimport blogService from '../services/blogs'\n\nconst blogSlice = createSlice({\n  name: 'blogs',\n  initialState: [],\n  reducers: {\n    setBlogs(state, action) {\n      return action.payload\n    },\n    appendBlog(state, action) {\n      state.push(action.payload)\n    },\n    changeBlog(state, action) {\n      const blogToChange = action.payload\n      const id = blogToChange.id\n\n      const updatedState = state.map((b) => (b.id !== id ? b : blogToChange))\n      const sortedBlogList = updatedState.sort((a, b) => b.likes - a.likes)\n      return sortedBlogList\n    },\n    removeBlog(state, action) {\n      return state.filter((blog) => blog.id !== action.payload)\n    },\n  },\n})\n\nexport const { setBlogs, appendBlog, changeBlog, removeBlog } =\n  blogSlice.actions\n\nexport const initializeBlogs = () => {\n  return async (dispatch) => {\n    const blogs = await blogService.getAll()\n    dispatch(setBlogs(blogs))\n  }\n}\n\nexport const createBlog = (blog, userToken) => {\n  return async (dispatch) => {\n    const newBlog = await blogService.addBlog(blog, userToken)\n    dispatch(appendBlog(newBlog))\n  }\n}\n\nexport const deleteBlog = (id, userToken) => {\n  return async (dispatch) => {\n    await blogService.deleteBlog(id, userToken)\n    dispatch(removeBlog(id))\n  }\n}\n\nexport const updateBlog = (blog, token, blogId) => {\n  return async (dispatch) => {\n    const updatedBlog = await blogService.updateBlog(blog, token, blogId)\n\n    dispatch(changeBlog(updatedBlog))\n  }\n}\n\nexport const addComment = (blogid, comment, token) => {\n  return async (dispatch) => {\n    const updatedBlog = await blogService.addComment(blogid, comment, token)\n\n    dispatch(changeBlog(updatedBlog))\n  }\n}\n\nexport default blogSlice.reducer\n"]},"metadata":{},"sourceType":"module"}